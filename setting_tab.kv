#: import Window kivy.core.window.Window
#: import CustomMDTextField bots.common.CustomMDTextField

<AppSettingTab>
    spacing: '8dp'
    MDGridLayout:
        id: settings_list
        cols: 2
        height: self.minimum_height
        spacing: '5dp'
        size_hint_y: None
        SettingRow:
            id: is_executor
            text: "Это исполнитель"
            type: "bool"
            MDBoxLayout:
                size_hint_x: .45
                Widget:
                MDCheckbox:
                    active:
                        is_executor.value if is_executor.value is not None else False
                    on_active: is_executor.set_value(self.active)
                    size_hint_x: None
                    width: self.height
        SettingRow:
            id: hotkey_break
            text: "Пауза (будет ждать завершения всех действий)"
            type: "str"
            MDTextField:
                size_hint_x: .45
                text:
                    hotkey_break.value if hotkey_break.value is not None else ""
                on_text: hotkey_break.set_value(self.text)
        SettingRow:
            id: hotkey_stop_action
            text: "Остановка текущего действия"
            type: "str"
            MDTextField:
                size_hint_x: .45
                text:
                    hotkey_stop_action.value \
                    if hotkey_stop_action.value is not None else ""
                on_text: hotkey_stop_action.set_value(self.text)
        SettingRow:
            id: hotkey_close_after_tasks
            text: "Завершение программы (будет ждать завершения всех действий)"
            type: "str"
            MDTextField:
                size_hint_x: .45
                text:
                    hotkey_close_after_tasks.value \
                    if hotkey_close_after_tasks.value is not None else ""
                on_text: hotkey_close_after_tasks.set_value(self.text)
        SettingRow:
            id: hotkey_close
            text: "Мгновенное завершение программы"
            type: "str"
            MDTextField:
                size_hint_x: .45
                text:
                    hotkey_close.value if hotkey_close.value is not None else ""
                on_text: hotkey_close.set_value(self.text)
    MDGridLayout:
        cols: 2
        height: self.minimum_height
        spacing: '5dp'
        MDRectangleFlatIconButton:
            on_release: root.refresh_settings()
            icon: 'refresh'
            size_hint_x: 1
            text: "Обновить из БД"
        MDRectangleFlatIconButton:
            on_release: root.save_settings()
            icon: 'content-save-settings-outline'
            size_hint_x: 1
            text: "Сохранить"


<SettingRow>
    md_bg_color: app.theme_cls.bg_dark
    height: '56dp'
    size_hint_y: None
    text: ""
    padding: ["5dp", 0]
    MDLabel:
        size_hint_x: .55
        text: root.text


<SelectionItem>
    IconLeftWidget:
        icon: root.icon
        text: root.text
        on_release: root.icon_func(root.text)


<BotSettingTab>
    spacing: '8dp'
    MDGridLayout:
        id: settings_list
        cols: 2
        height: self.minimum_height
        spacing: '5dp'
        size_hint_y: None
        SettingRow:
            id: bot_working
            text: "Сколько работать от-до (в сек)"
            type: "list"
            MDTextField:
                size_hint_x: .2
                text: bot_working.value[0] if bot_working.value is not None else ""
                on_text:
                    bot_working.set_value([self.text, \
                    bot_working.value[1] if bot_working.value is not None else ""])
            Widget:
                size_hint_x: .05
            MDTextField:
                size_hint_x: .2
                text: bot_working.value[1] if bot_working.value is not None else ""
                on_text:
                    bot_working.set_value([bot_working.value[0] \
                    if bot_working.value is not None else "", self.text])
        SettingRow:
            id: bot_break
            text: "Сколько перерыв от-до (в сек)"
            type: "list"
            MDTextField:
                size_hint_x: .2
                text: bot_break.value[0] if bot_break.value is not None else ""
                on_text:
                    bot_break.set_value([self.text, \
                    bot_break.value[1] if bot_break.value is not None else ""])
            Widget:
                size_hint_x: .05
            MDTextField:
                size_hint_x: .2
                text: bot_break.value[1] if bot_break.value is not None else ""
                on_text:
                    bot_break.set_value([bot_break.value[0] \
                    if bot_break.value is not None else "", self.text])
        SettingRow:
            id: debug
            text: "Дебаг (не запускать следующий этап)"
            type: "bool"
            MDBoxLayout:
                size_hint_x: .45
                Widget:
                MDCheckbox:
                    active:
                        debug.value if debug.value is not None else False
                    on_active: debug.set_value(self.active)
                    size_hint_x: None
                    width: self.height

    MDGridLayout:
        cols: 2
        height: self.minimum_height
        spacing: '5dp'
        MDRectangleFlatIconButton:
            on_release: root.open_action_variables()
            icon: 'ticket-confirmation-outline'
            pos_hint: {'center_x': .5, 'center_y': .5}
            size_hint_x: 1
            text: "Открыть настройку шаблонов"
        MDRectangleFlatIconButton:
            on_release: root.save_settings()
            icon: 'content-save-settings-outline'
            size_hint_x: 1
            text: "Сохранить"


<VariablesBox>
    orientation: 'vertical'
    size_hint: None, None
    height: Window.height * 0.75
    width: Window.width * .7
    MDScrollView:
        GridLayout:
            cols: 1
            id: variables_sections
            size_hint_y: None
            height: self.minimum_height


<VariablesSection>
    height: self.minimum_height
    orientation: 'vertical'
    size_hint_y: None
    MDLabel:
        height: '56dp'
        size_hint: 1, None
        text: root.title
    GridLayout:
        id: variables
        cols: 1
        height: self.minimum_height
        size_hint_y: None


<VariablesRow>
    height: '56dp'
    icon: "trash-can"
    icons_right:
        {'region': 'vector-square-edit',
        'coord': 'vector-point-edit',
        'template': 'image-edit-outline',
        'coord_list': 'vector-polyline-edit'
        }
    size_hint_y: None
    MDTextField:
        id: tf
        hint_text: root.variable.fullname()
        icon_right:
            root.icons_right[root.variable.type] if root.icons_right and root.variable \
            and root.variable.type in root.icons_right else 'credit-card-edit-outline'
        text: root.value
        on_text: root.set_value(self.text)
        on_touch_down: root.on_press_textfield_right_icon(*args)
